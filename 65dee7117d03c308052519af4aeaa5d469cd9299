Revision: 65dee7117d03c308052519af4aeaa5d469cd9299
Patch-set: 1
File: wifi/wifi.c

52:31-52:37
Wed May 07 20:47:10 2014 +0000
Author: Dmitry Shmidt <1000414@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a6cc413_f980736e
Bytes: 47
It is unnecessary - TERMINATE is global command

52:31-52:37
Thu May 08 06:55:13 2014 +0000
Author: mahesh kumar <1017493@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a6cc413_f980736e
UUID: 6a02a043_a5b356ef
Bytes: 229
if we dont specify the interface name then the event is handled by p2p wifi monitor instance since events without prefix belong to p2p0 monitor.

sending SUP_DISCONNECTION_EVENT to wifip2pservice is not restarting the supplicant.

52:31-52:37
Thu May 08 17:41:32 2014 +0000
Author: Dmitry Shmidt <1000414@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a02a043_a5b356ef
UUID: ca138c9f_87610890
Bytes: 166
Current (mainstream wpa_supplicant in case of TERMINATE command (global) will not interpret it as p2p, but will send it to both interfaces. (just tested it manually).

52:31-52:37
Thu May 08 19:42:09 2014 +0000
Author: mahesh kumar <1017493@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca138c9f_87610890
UUID: ca138c9f_6d2e6db2
Bytes: 405
yes main stream supplicant registered for SIGHUP SIGINT signals and when called it will send terminate on both the interfaces to framework. but SIGSEGV is not registered its not feasible to register for this in supplicant.
please test with kill -SIGSEGV until supplicant crashes then all the commands from framework to supplicant will fail and we should manually turn off and turn on wlan to make it work.

52:31-52:37
Thu May 08 20:00:17 2014 +0000
Author: Dmitry Shmidt <1000414@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca138c9f_6d2e6db2
UUID: ca138c9f_ad6ea5cc
Bytes: 57
Right, but my point is that IFNAME=wlan0 is not necessary

52:31-52:37
Fri May 09 05:26:12 2014 +0000
Author: mahesh kumar <1017493@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca138c9f_ad6ea5cc
UUID: 8a999485_3b7e8bf4
Bytes: 180
i have already specified this above that if IFNAME=wlan0 is not specified then the event is handled by p2p wifi monitor instance since events without prefix belong to p2p0 monitor.

712:8-712:11
Wed May 07 20:47:10 2014 +0000
Author: Dmitry Shmidt <1000414@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca654c2b_f42eb8c3
Bytes: 53
Timeout is already implemented in wifi_send_command()

712:8-712:11
Thu May 08 06:55:13 2014 +0000
Author: mahesh kumar <1017493@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca654c2b_f42eb8c3
UUID: 6a02a043_4588aa11
Bytes: 292
this timeout is to check if supplicant is active or not.
test scenario:
supplicant crashed due to segmentation error and there is no recovery mechanism to restart the supplicant.

to recover from this errors we can specify timeout in poll command and check if the supplicant is active or not.

712:8-712:11
Thu May 08 17:41:32 2014 +0000
Author: Dmitry Shmidt <1000414@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a02a043_4588aa11
UUID: ca138c9f_c7d94002
Bytes: 98
I would rather prefer to catch crash and fix it than silently recover and crash again and again...

712:8-712:11
Thu May 08 19:42:09 2014 +0000
Author: mahesh kumar <1017493@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca138c9f_c7d94002
UUID: aa62d821_4841cb6d
Bytes: 194
As developer even i prefer to debug segmentation fault, but from enduser/customer prospective there should be a recovery mechanism and anyhow logcat logs will dump the stack trace for debugging.

712:8-712:11
Thu May 08 20:00:17 2014 +0000
Author: Dmitry Shmidt <1000414@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa62d821_4841cb6d
UUID: ca138c9f_ed3b7dbc
Bytes: 298
I see your point but it is still somehow not very convincing - my point is that if there is a situation with real crash (no kill manually), I would like to see it and fix - hiding it may not improve user experience. Are you trying to resolve real problem? Maybe you can provide crash scenario then.

712:8-712:11
Fri May 09 05:26:12 2014 +0000
Author: mahesh kumar <1017493@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca138c9f_ed3b7dbc
UUID: 8a999485_db8d7fdd
Bytes: 446
there was a segmentation fault which is already fixed. but my point is that hitting the crash every time  is very less likely so restarting the supplicant is right thing to do.Any how since we have call trace we can always debug the issues.

when i see from end user perspective restarting supplicant is not a big issue when compared to leaving the entire wifi in some bad state(he will not able to perform any operation(connect/disconnect/scan))

